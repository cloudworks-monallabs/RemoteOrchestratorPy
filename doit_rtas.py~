"""
v2: all remote conn work is done by fabric_conn; clustershell will be used for parallelism.

Things to keep in mind:
- ssh_user
- the ssh private key
- consistent naming
- uptodate
"""
from pipeline_constants import *
from doit_rtas_helpers import log_command_exec_status, ship_file
from fabric import Connection
from fabric import Connection, Config
from patchwork.files import exists
import logging
from doit_extntools import RemoteFilesDep

logger = logging.getLogger(__name__)


def remote_exec_cmd(self,  task_label, *args):

    status = "Success"

    for cmdstr in args:
        print ("now running command = ", cmdstr)
        result = self.active_conn.run(cmdstr, hide=True)
        
        status = log_command_exec_status(cmdstr,
                                         result,
                                         task_label,
                                         self.ipv6
                                )
        if status == "Failed":
            break

    return status

def check_remote_files_exists(fabric_conn, remote_targets):

    logger.info(f"remote_step: Checking if remote target exists: { remote_targets}")
    
    for _fs in remote_targets:
        if not exists(fabric_conn, _fs):
            logger.info(
                f"Path {_fs} does not exits")
            return False

    logger.info(f"All remote targets  exists")
        
    return True
            
class RemoteTaskActionSequence:
    """

    """
    def __init__(self,
                 basename,
                 id_args,
                 ipv6,
                 *args,
                 **kwargs):
        """
        basename: the task basename
        id_args: a tuple to identify the subtask
        """
        self.basename = f"""{basename}:{ipv6}:{ "_".join([str(_) for _ in id_args])}"""
        self.ipv6 = ipv6
        
        self.task_local_steps_pre = None
        self.task_ship_files_iter = None
        self.task_remote_step = None
        self.task_fetch_files = None
        self.task_local_step_post = None
        connect_kwargs = {
            "key_filename": f"{cluster_resources_datadir}/{adming_public_key_file}",
        }

        config = Config(overrides={
            'connect_kwargs': connect_kwargs,
            'run': {
                'hide': True,
                'warn': True,
                'echo': True
            },
        })


        self.user_adming_conn = Connection(host=self.ipv6,
                                           user="adming",
                                           config=config
                                           )
        self.user_root_conn = Connection(host=self.ipv6,
                                           user="root",
                                           config=config
                                           )
        
        self.active_conn = self.user_adming_conn #self.user_root_conn
        
        

    def __del__(self):
        """
        cleanup resources
        """
        print("Admin connection closed.")
        self.user_adming_conn.close()
        self.user_root_conn.close()
        pass
    
    def set_task_local_step_pre(self,
                           step_func,
                           *args,
                           **kwargs
                           ):
        """
        args  will be passed stepfunc as is.
        **kwargs has task directives like targets etc. 
        """
        trec = {
            'basename': self.basename,
            'name': "local_step_pre",
            #'task_dep' : [get_ref_name(_) for _ in self.deps],
            'actions': [(step_func, *args)],
            }
        if 'targets' in kwargs:
            trec['targets'] = kwargs.get('targets')
            

        if 'file_dep' in kwargs:
            trec['file_dep'] = kwargs.get('file_dep')

        if 'uptodate' in kwargs:
            trec['uptodate'] = kwargs.get('uptodate')
            
            
        self.task_local_steps_pre = trec
        
        pass

    def set_task_ship_files_iter(self, files_to_ship, dest_dir=None):
        if not dest_dir:
            dest_dir = remote_work_dir

        def ship_task_iter():
            for file_to_ship in files_to_ship:
                file_basename = Path(file_to_ship).name
                trec = {
                    'basename': self.basename,

                    'name': f"ship_file:{file_basename}",
                    'actions': [(ship_file, [self.active_conn,
                                             file_to_ship,
                                             dest_dir
                                             ])

                                ],
                    'uptodate': [(check_remote_files_exists,
                                     [self.active_conn, [f"{dest_dir}/{file_basename}"]]
                                     )
                                    
                                 ],
                    'file_dep': [file_to_ship]
                    }


                yield trec
                
        self.task_ship_files_iter  = ship_task_iter()
    
    def set_task_remote_step(self, *args, **kwargs):
        """
        args is a list of string
        each a command to be run on remote machine
        kwargs['targets'] impiles remote targets
        
        
        """
        trec = {
            'basename': self.basename,
            'name': "remote_step",
            # 'task_dep' : [get_ref_name(_) for _ in self.deps],
            'actions': [(remote_exec_cmd, [self,
                                           f"{self.basename}:remote_step",
                                           *args])],
            }


        trec['uptodate'] = kwargs.get('uptodate', [])
        
        #target implies remote targets
        if 'targets' in kwargs:
            trec['uptodate'].append((check_remote_files_exists,
                                     [self.active_conn, kwargs.get('targets')]
                                     )
                                    )
            

        #file_dep implies remote file_dep
        if 'file_dep' in kwargs:
            trec['uptodate'].append(RemoteFilesDep(self.active_conn,
                                                   kwargs.get('file_dep')
                                                   )
                                    )

                
            
        self.task_remote_step = trec
        
        pass

    def set_task_fetch_files(self, files_to_fetch):
        
    def set_local_step_post():
        pass

    def __iter__(self):
        if self.task_local_steps_pre:
            yield self.task_local_steps_pre

        if self.task_ship_files_iter:
            yield from self.task_ship_files_iter
            
        if  self.task_remote_step:
            yield self.task_remote_step

            

        
